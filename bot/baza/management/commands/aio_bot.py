# import datetime as dt
import logging
import os

import django
# import psycopg2
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from baza.answer_messages import message_texts
from baza.models import Apartment, House, Land, Room, TownHouse
from baza.states import CallbackOnStart, RoomCallbackStates
# from baza.users import users
from baza.utils import keyboards
from decouple import config
from django.core.management.base import BaseCommand

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rest.settings')
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

DB_NAME = config('DB_NAME')
POSTGRES_USER = config('POSTGRES_USER')
POSTGRES_PASSWORD = config('POSTGRES_PASSWORD')
DB_HOST = config('DB_HOST')
DB_PORT = config('DB_PORT')

bot = Bot(token=config('TELEGRAM_TOKEN'))

dp = Dispatcher(bot, storage=MemoryStorage())


class Command(BaseCommand):
    def handle(self, *args, **options):
        executor.start_polling(dp, skip_updates=True)


@dp.message_handler(commands=['deleteobject'])
async def delete_object(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞."""

    await message.answer(message_texts.on.get('delete'))


@dp.message_handler(commands=['about'])
async def about(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ."""

    await message.answer(
        '\n'.join(message_texts.on.get('about')),
        parse_mode='markdown'
    )


@dp.message_handler(commands=['getstatistics'])
async def get_statistics(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""

    await message.answer(message_texts.on.get('statistics'))


@dp.message_handler(commands=['searchobjects'])
async def search_objects(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã"""

    await message.answer(
        'üîª –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞',
        reply_markup=keyboards.get_category_keyboard()
    )


@dp.message_handler(commands=['addobject'])
async def add_object(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""

    await message.answer(
        'üîª –ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?',
        reply_markup=keyboards.add_category_keyboard()
    )


@dp.callback_query_handler(text="–ö–≤–∞—Ä—Ç–∏—Ä—ã")
async def apartments(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º"""

    await callback.message.edit_text(
        'üîª –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç',
        reply_markup=keyboards.get_rooms_count_keyboard()
    )


@dp.callback_query_handler(text='–ö–æ–º–Ω–∞—Ç—ã')
async def rooms(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º"""

    await callback.message.answer(
        '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *–∫–æ–º–Ω–∞—Ç–∞–º*:',
        parse_mode="MarkdownV2"
    )
    query_set = Room.objects.order_by('-pub_date')
    for item in query_set:
        await callback.message.answer(
            message_texts.room_search_result_text(item),
            parse_mode='Markdown'
        )


@dp.callback_query_handler(text='–î–æ–º–∞')
async def houses(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–º–∞–º"""

    await callback.message.answer(
        '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *–¥–æ–º–∞–º*:',
        parse_mode="MarkdownV2",
    )
    query_set = House.objects.order_by('-pub_date')
    for item in query_set:
        await callback.message.answer(
            message_texts.house_search_result_text(item),
            parse_mode='Markdown'
        )


@dp.callback_query_handler(text='–¢–∞—É–Ω—Ö–∞—É—Å—ã')
async def townhouses(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞—É–Ω—Ö–∞—É—Å–∞–º"""

    await callback.message.answer(
        '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *—Ç–∞—É–Ω—Ö–∞—É—Å–∞–º*:',
        parse_mode="MarkdownV2",
    )
    query_set = TownHouse.objects.order_by('-pub_date')
    for item in query_set:
        await callback.message.answer(
            message_texts.townhouse_search_result_text(item),
            parse_mode='Markdown'
        )


@dp.callback_query_handler(text='–£—á–∞—Å—Ç–∫–∏')
async def lands(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ —É—á–∞—Å—Ç–∫–∞–º"""

    await callback.message.answer(
        '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *—É—á–∞—Å—Ç–∫–∞–º*:',
        parse_mode="MarkdownV2",
    )
    query_set = Land.objects.order_by('-pub_date')
    for item in query_set:
        await callback.message.answer(
            message_texts.lands_search_result_text(item),
            parse_mode='Markdown'
        )


@dp.callback_query_handler(text='‚è™ –ù–∞–∑–∞–¥')
async def back_button_action(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    await callback.message.edit_text(
        'üîª –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞',
        reply_markup=keyboards.get_category_keyboard()
    )


@dp.callback_query_handler(text=[
    '1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ',
    '3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '4-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ',
    '5-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ'
])
async def apartment_search_result(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä"""

    room_count = callback.data.removesuffix('-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ')
    await callback.message.answer(
        f'‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *{room_count}-–∫–æ–º–Ω–∞—Ç–Ω—ã–º*:',
        parse_mode="Markdown",
    )
    query_set = Apartment.objects.filter(
        room_quantity=int(room_count)
    ).order_by('-pub_date')
    for item in query_set:
        await callback.message.answer(
            message_texts.apartments_search_result_text(int(room_count), item),
            parse_mode='Markdown'
        )


@dp.callback_query_handler(text='–ö–≤–∞—Ä—Ç–∏—Ä—É')
async def add_apartment(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã"""

    await state.update_data(reality_category=callback.data)
    await callback.message.edit_text(
        '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 13 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç '
        + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.'
        + '\n'
        + '\nüîª –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
        reply_markup=keyboards.add_rooms_count_keyboard()
    )


# –° –≠–¢–û–ì–û –ú–ï–°–¢–ê –û–ü–†–û–° –ü–û –ö–í–ê–†–¢–ò–†–ï
@dp.callback_query_handler(text=[
    'add_1_room', 'add_2_room',
    'add_3_room', 'add_4_room',
    'add_5_room'
])
async def entering_room_count(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–≤."""

    await state.update_data(room_count=callback.data[4])
    await callback.message.edit_text(
        'üîª –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–∞–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã c –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã'
    )
    await CallbackOnStart.Q1.set()


@dp.message_handler(state=CallbackOnStart.Q1)
async def entering_street_name(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã, —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å """

    answer = message.text
    await state.update_data(street_name=answer)

    await message.answer(
        'üîª –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "5", "5–ê" –∏–ª–∏ "91 –∫–æ—Ä–ø.1'
    )
    await CallbackOnStart.next()


@dp.message_handler(state=CallbackOnStart.Q2)
async def entering_house_number(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å """

    answer = message.text
    await state.update_data(house_number=answer)
    await message.answer(
        'üîª –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        reply_markup=keyboards.floor_number_or_count_keyboard('apartment_floor')
    )
    await CallbackOnStart.next()


@dp.callback_query_handler(state=CallbackOnStart.Q3, text=[
    '1_afloor', '2_afloor', '3_afloor', '4_afloor', '5_afloor', '6_afloor',
    '7_afloor', '8_afloor', '9_afloor', '10_afloor', '11_afloor', '12_afloor',
    '13_afloor', '14_afloor', '15_afloor', '16_afloor', '17_afloor', '18_afloor',
])
async def entering_floor(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã"""

    await state.update_data(floor=callback.data.removesuffix('_afloor'))
    await callback.message.edit_text(
        'üîª –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π',
        reply_markup=keyboards.floor_number_or_count_keyboard('apartment_house_floors')
    )
    await CallbackOnStart.next()


@dp.callback_query_handler(state=CallbackOnStart.Q4, text=[
    '1_afloors', '2_afloors', '3_afloors', '4_afloors', '5_afloors', '6_afloors',
    '7_afloors', '8_afloors', '9_afloors', '10_afloors', '11_afloors', '12_afloors',
    '13_afloors', '14_afloors', '15_afloors', '16_afloors', '17_afloors', '18_afloors',
])
async def entering_floors(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏ –¥–æ–º–∞"""

    await state.update_data(floors=callback.data.removesuffix('_afloors'))

    await callback.message.edit_text(
        'üîª –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∫–∞–∫ –≤ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–µ –∏–ª–∏ –≤—ã–ø–∏—Å–∫–µ'
    )
    await CallbackOnStart.next()


@dp.message_handler(state=CallbackOnStart.Q5)
async def entering_area(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –ø–ª–æ—â–∞–¥–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã"""

    try:
        answer = float(message.text)
        await state.update_data(area=answer)
        await message.answer(
            'üîª –ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É.\n\n–ü—Ä–æ—Å—Ç–æ –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏, '
            + '–Ω–µ —Å–æ–∫—Ä–∞—â–∞—è, –∏ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –†, —Ä, ‚ÇΩ, —Ä—É–±. –∏ —Ç.–ø.\n\n–ï—Å–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å '
            + '—Å—Ç–æ–∏—Ç 3400000 —Ä—É–±–ª–µ–π, –∑–Ω–∞—á–∏—Ç —Ç–∞–∫ –∏ –ø–∏—à–∏—Ç–µ 3400000'
        )
        await CallbackOnStart.next()

    except (ValueError) as e:
        await CallbackOnStart.Q5.set()
        await message.answer(
            'ü§î –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏.\n\n–ü–ª–æ—â–∞–¥—å'
            + ' —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." –¥–ª—è '
            + '–¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –¢–∞–∫ –∂–µ –ù–ï —É–∫–∞–∑—ã–≤–∞–π—Ç—å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. '
            + ''
            + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:'
        )
        logging.error(f'{e}')


@dp.message_handler(state=CallbackOnStart.Q6)
async def entering_price(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å —Ü–µ–Ω—ã"""

    try:
        answer = int(message.text)
        await state.update_data(price=answer)
        await message.answer(
            'üîª –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ '
            + '–≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ —ç—Ç–∞–∂, —Ü–µ–Ω–∞ –∏ –¥—Ä. '
            + '\n\n–¢–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–æ, —Å–∞–º—É—é —Å—É—Ç—å - —Å–æ—Å—Ç–æ—è–Ω–∏–µ.'
        )
        await CallbackOnStart.next()

    except (ValueError) as e:
        await CallbackOnStart.Q6.set()
        await message.answer(
            'ü§î ü§î –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã. –¶–µ–Ω—É'
            + ' —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è "." '
            + '–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.'
            + ''
            + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:'
        )
        logging.error(f'{e}')


@dp.message_handler(state=CallbackOnStart.Q7)
async def entering_description(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

    answer = message.text
    await state.update_data(description=answer)
    await message.answer(
        'üîª –ù–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –µ—Å—Ç—å –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ?',
        reply_markup=keyboards.yes_no_keyboard('encumbrance')
    )
    await CallbackOnStart.next()


@dp.callback_query_handler(
    state=CallbackOnStart.Q8,
    text=['yes_encumbrance', 'no_encumbrance']
)
async def entering_encumbrance(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏—è"""

    if callback.data == 'yes_encumbrance':
        await state.update_data(encumbrance=True)
    if callback.data == 'no_encumbrance':
        await state.update_data(encumbrance=False)
    await callback.message.edit_text(
        'üîª –í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –¥–µ—Ç–∏?',
        reply_markup=keyboards.yes_no_keyboard('children')
    )
    await CallbackOnStart.next()


@dp.callback_query_handler(
    state=CallbackOnStart.Q9,
    text=['yes_children', 'no_children']
)
async def entering_children(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞–ª–∏—á–∏—è –¥–µ—Ç–µ–π"""

    if callback.data == 'yes_children':
        await state.update_data(children=True)
    if callback.data == 'no_children':
        await state.update_data(children=False)
    await callback.message.edit_text(
        'üîª –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –∏–ø—Ç–æ–µ–∫–µ?',
        reply_markup=keyboards.yes_no_keyboard('mortage')
    )
    await CallbackOnStart.next()


@dp.callback_query_handler(
    state=CallbackOnStart.Q10,
    text=['yes_mortage', 'no_mortage']
)
async def entering_mortage(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –∏–ø–æ—Ç–µ–∫—É"""

    if callback.data == 'yes_mortage':
        await state.update_data(mortage=True)
    if callback.data == 'no_mortage':
        await state.update_data(mortage=False)
    await callback.message.edit_text(
        'üîª –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä '
        + '—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å'
        + '–≤–∞–º–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è'
    )
    await CallbackOnStart.next()


@dp.message_handler(state=CallbackOnStart.Q11)
async def entering_phone_number(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""

    answer = message.text
    await state.update_data(phone_number=answer)
    await message.answer(
        'üîª –í –∫–∞–∫–æ–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–µ –≤—ã —Ç—Ä—É–¥–∏—Ç–µ—Å—å?\n\n'
        + '–ï—Å–ª–∏ –≤—ã —á–∞—Å—Ç–Ω—ã–π —Ä–∏–µ–ª—Ç–æ—Ä, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ß–∞—Å—Ç–Ω—ã–π"'
    )
    await CallbackOnStart.next()


@dp.message_handler(state=CallbackOnStart.Q12)
async def entering_agency_name(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞"""

    answer = message.text
    await state.update_data(agency_name=answer)
    await message.answer(
        'üîª –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è'
    )
    await CallbackOnStart.next()


@dp.message_handler(state=CallbackOnStart.Q13)
async def entering_rialtor_name(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ —Ä–∏–µ–ª—Ç–æ—Ä–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""

    answer = message.text
    await state.update_data(rieltor_name=answer)
    data = await state.get_data()
    await message.answer(
        '\n'.join(
            message_texts.apartment_adding_result_text(data)
        ),
        parse_mode="Markdown"
    )
    await state.finish()


# –° –≠–¢–û–ì–û –ú–ï–°–¢–ê –û–ü–†–û–° –ü–û –ö–û–ú–ù–ê–¢–ï
@dp.callback_query_handler(text='–ö–æ–º–Ω–∞—Ç—É')
async def add_room(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã"""

    await state.update_data(room_reality_category=callback.data)
    await callback.message.edit_text(
        '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç '
        + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.'
        + '\n'
        + '\nüîª –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã'
    )
    await RoomCallbackStates.R1.set()


@dp.message_handler(state=RoomCallbackStates.R1)
async def enetering_rooms_street_name(
    message: types.Message, state: FSMContext
):
    """–ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã –∫–æ–º–Ω–∞—Ç—ã"""

    await state.update_data(room_street_name=message.text)
    await message.answer(
        'üîª –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "5", "5–ê" –∏–ª–∏ "91 –∫–æ—Ä–ø.1'
    )
    await RoomCallbackStates.next()


@dp.message_handler(state=RoomCallbackStates.R2)
async def enetering_rooms_house_number(
    message: types.Message, state: FSMContext
):
    """–ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞"""

    await state.update_data(room_house_number=message.text)
    await message.answer(
        'üîª –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ –∫–æ–º–Ω–∞—Ç—ã',
        reply_markup=keyboards.floor_number_or_count_keyboard('room_floor')
    )
    await RoomCallbackStates.next()


@dp.callback_query_handler(state=RoomCallbackStates.R3, text=[
    '1_rfloor', '2_rfloor', '3_rfloor', '4_rfloor', '5_rfloor', '6_rfloor',
    '7_rfloor', '8_rfloor', '9_rfloor', '10_rfloor', '11_rfloor', '12_rfloor',
    '13_rfloor', '14_rfloor', '15_rfloor', '16_rfloor', '17_rfloor', '18_rfloor',
])
async def entering_room_floor(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–∂–∞ –∫–æ–º–Ω–∞—Ç—ã"""

    await state.update_data(room_floor=callback.data.removesuffix('_rfloor'))
    await callback.message.edit_text(
        'üîª –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π',
        reply_markup=keyboards.floor_number_or_count_keyboard('room_house_floors')
    )
    await RoomCallbackStates.next()


@dp.callback_query_handler(state=RoomCallbackStates.R4, text=[
    '1_rfloors', '2_rfloors', '3_rfloors', '4_rfloors', '5_rfloors', '6_rfloors',
    '7_rfloors', '8_rfloors', '9_rfloors', '10_rfloors', '11_rfloors', '12_rfloors',
    '13_rfloors', '14_rfloors', '15_rfloors', '16_rfloors', '17_rfloors', '18_rfloors',
])
async def entering_room_floors(
    callback: types.CallbackQuery, state: FSMContext
):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏ –¥–æ–º–∞"""

    await state.update_data(room_floors=callback.data.removesuffix('_rfloors'))
    await callback.message.edit_text(
        'üîª –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã, –∫–∞–∫ –≤ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–µ –∏–ª–∏ –≤—ã–ø–∏—Å–∫–µ'
    )
    await RoomCallbackStates.next()


@dp.message_handler(state=RoomCallbackStates.R5)
async def enetering_rooms_area(
    message: types.Message, state: FSMContext
):
    """–ó–∞–ø–∏—Å—å –ø–ª–æ—â–∞–¥–∏ –∫–æ–º–Ω–∞—Ç—ã"""

    try:
        answer = float(message.text)
        await state.update_data(room_area=answer)
        await message.answer(
            'üîª –ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É.\n\n–ü—Ä–æ—Å—Ç–æ –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏, '
            + '–Ω–µ —Å–æ–∫—Ä–∞—â–∞—è, –∏ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –†, —Ä, ‚ÇΩ, —Ä—É–±. –∏ —Ç.–ø.\n\n–ï—Å–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å '
            + '—Å—Ç–æ–∏—Ç 3400000 —Ä—É–±–ª–µ–π, –∑–Ω–∞—á–∏—Ç —Ç–∞–∫ –∏ –ø–∏—à–∏—Ç–µ 3400000'
        )
        await RoomCallbackStates.next()

    except (ValueError) as e:
        await RoomCallbackStates.R5.set()
        await message.answer(
            'ü§î –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏.\n\n–ü–ª–æ—â–∞–¥—å'
            + ' —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." –¥–ª—è '
            + '–¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –¢–∞–∫ –∂–µ –ù–ï —É–∫–∞–∑—ã–≤–∞–π—Ç—å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. '
            + ''
            + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:'
        )
        logging.error(f'{e}')


@dp.message_handler(state=RoomCallbackStates.R6)
async def entering_room_price(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å —Ü–µ–Ω—ã"""

    try:
        answer = int(message.text)
        await state.update_data(room_price=answer)
        await message.answer(
            'üîª –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ '
            + '–≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ —ç—Ç–∞–∂, —Ü–µ–Ω–∞ –∏ –¥—Ä. '
            + '\n\n–¢–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–æ, —Å–∞–º—É—é —Å—É—Ç—å - —Å–æ—Å—Ç–æ—è–Ω–∏–µ.'
        )
        await RoomCallbackStates.next()

    except (ValueError) as e:
        await RoomCallbackStates.R6.set()
        await message.answer(
            'ü§î ü§î –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã. –¶–µ–Ω—É'
            + ' —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è "." '
            + '–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.'
            + ''
            + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:'
        )
        logging.error(f'{e}')


@dp.message_handler(state=RoomCallbackStates.R7)
async def entering_room_description(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

    answer = message.text
    await state.update_data(room_description=answer)
    await message.answer(
        'üîª –ù–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –µ—Å—Ç—å –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ?',
        reply_markup=keyboards.yes_no_keyboard('encumbrance')
    )
    await RoomCallbackStates.next()


@dp.callback_query_handler(
    state=RoomCallbackStates.R8,
    text=['yes_encumbrance', 'no_encumbrance']
)
async def entering_room_encumbrance(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏—è"""

    if callback.data == 'yes_encumbrance':
        await state.update_data(room_encumbrance=True)
    if callback.data == 'no_encumbrance':
        await state.update_data(room_encumbrance=False)
    await callback.message.edit_text(
        'üîª –í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –¥–µ—Ç–∏?',
        reply_markup=keyboards.yes_no_keyboard('children')
    )
    await RoomCallbackStates.next()


@dp.callback_query_handler(
    state=RoomCallbackStates.R9,
    text=['yes_children', 'no_children']
)
async def entering_room_children(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞–ª–∏—á–∏—è –¥–µ—Ç–µ–π"""

    if callback.data == 'yes_children':
        await state.update_data(room_children=True)
    if callback.data == 'no_children':
        await state.update_data(room_children=False)
    await callback.message.edit_text(
        'üîª –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –∏–ø—Ç–æ–µ–∫–µ?',
        reply_markup=keyboards.yes_no_keyboard('mortage')
    )
    await RoomCallbackStates.next()


@dp.callback_query_handler(
    state=RoomCallbackStates.R10,
    text=['yes_mortage', 'no_mortage']
)
async def entering_room_mortage(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –∏–ø–æ—Ç–µ–∫—É"""

    if callback.data == 'yes_mortage':
        await state.update_data(room_mortage=True)
    if callback.data == 'no_mortage':
        await state.update_data(room_mortage=False)
    await callback.message.edit_text(
        'üîª –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä '
        + '—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å'
        + '–≤–∞–º–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è'
    )
    await RoomCallbackStates.next()


@dp.message_handler(state=RoomCallbackStates.R11)
async def entering_room_phone_number(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""

    answer = message.text
    await state.update_data(room_phone_number=answer)
    await message.answer(
        'üîª –í –∫–∞–∫–æ–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–µ –≤—ã —Ç—Ä—É–¥–∏—Ç–µ—Å—å?\n\n'
        + '–ï—Å–ª–∏ –≤—ã —á–∞—Å—Ç–Ω—ã–π —Ä–∏–µ–ª—Ç–æ—Ä, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ß–∞—Å—Ç–Ω—ã–π"'
    )
    await RoomCallbackStates.next()


@dp.message_handler(state=RoomCallbackStates.R12)
async def entering_room_agency_name(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞"""

    answer = message.text
    await state.update_data(room_agency_name=answer)
    await message.answer(
        'üîª –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è'
    )
    await RoomCallbackStates.next()


@dp.message_handler(state=RoomCallbackStates.R13)
async def entering_room_rialtor_name(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ —Ä–∏–µ–ª—Ç–æ—Ä–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""

    answer = message.text
    await state.update_data(room_rieltor_name=answer)
    data = await state.get_data()
    await message.answer(
        '\n'.join(
            message_texts.room_adding_result_text(data)
        ),
        parse_mode="Markdown"
    )
    await state.finish()


# –° –≠–¢–û–ì–û –ú–ï–°–¢–ê –û–ü–†–û–° –ü–û –ö–û–ú–ù–ê–¢–ï


    # data = await state.get_data()
    # text = []
    # for i in data:
    #     text.append(f'{data[i]}')
    # print(text)

# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True)
