import datetime as dt
import os
import logging

import psycopg2
from baza.about_text import about_text
from baza.models import Apartment, House, Land, Room, TownHouse
from baza.users import users
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.settings import DATABASES

DB_NAME = DATABASES.get('default').get('NAME')
POSTGRES_USER = DATABASES.get('default').get('USER')
POSTGRES_PASSWORD = DATABASES.get('default').get('PASSWORD')
DB_HOST = DATABASES.get('default').get('HOST')
DB_PORT = DATABASES.get('default').get('PORT')

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

bot = TeleBot(TELEGRAM_TOKEN)

logging.basicConfig(
    level=logging.DEBUG,
    filename='main.log',
    filemode='w',
    format='%(asctime)s, %(levelname)s, %(message)s, %(name)s'
)

room_quantity = 0
street_name = ''
number_of_house = 0
floor = 0
number_of_floors = 0
area = 0
price = 0
description = ''
encumbrance = False
children = False
mortage = True

microregion = ''
gaz = ''
water = ''
road = ''
area_of_land = 0
material = ''
finish = ''
purpose = ''
sauna = ''
garage = ''
fence = ''

phone_number = ''
rieltor_name = ''
agency_name = ''

# objects_group = ''

db_connection = psycopg2.connect(
        database=DB_NAME,
        user=POSTGRES_USER,
        password=POSTGRES_PASSWORD,
        host=DB_HOST,
        port=DB_PORT
    )


def apartment_description_result():
    if encumbrance is True:
        encumbrance_text = '–ï—Å—Ç—å'
    else:
        encumbrance_text = '–ù–µ—Ç'

    if children is True:
        children_text = '–ï—Å—Ç—å'
    else:
        children_text = '–ù–µ—Ç'

    if mortage is True:
        mortage_text = '–ú–æ–∂–Ω–æ'
    else:
        mortage_text = '–ù–µ–ª—å–∑—è'

    if reality == '–∫–≤–∞—Ä—Ç–∏—Ä':
        text = [
            'ü•≥ _–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–Ω–µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É_ ‚ù§Ô∏èüí™üôå:',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: *–ö–≤–∞—Ä—Ç–∏—Ä–∞*',
            f'*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:* {room_quantity}',
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:* {street_name}',
            f'*–ù–æ–º–µ—Ä –¥–æ–º–∞:* {number_of_house}',
            f'*–≠—Ç–∞–∂:* {floor}/{number_of_floors}',
            f'*–ü–ª–æ—â–∞–¥—å:* {area} –∫–≤.–º.',
            f'*–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* {description}',
            f'*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {encumbrance_text}',
            f'*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {children_text}',
            f'*–û—Ñ–æ—Ä–º–∏—Ç—å –≤ –∏–ø–æ—Ç–µ–∫—É:* {mortage_text}',
            f'*–¶–µ–Ω–∞:* {price} ‚ÇΩ',
            f'*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {rieltor_name}',
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞:* {agency_name}',
            f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:* {phone_number}',
            '',
            '‚ùé –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç –º–µ–Ω—é. '
            + '–ï—Å–ª–∏ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–∏—à–∏—Ç–µ @davletelvir'
        ]
    if reality == '–∫–æ–º–Ω–∞—Ç':
        text = [
            'ü•≥ _–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–Ω–µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É_ ‚ù§Ô∏èüí™üôå:',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: *–ö–æ–º–Ω–∞—Ç–∞*',
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:* {street_name}',
            f'*–ù–æ–º–µ—Ä –¥–æ–º–∞:* {number_of_house}',
            f'*–≠—Ç–∞–∂:* {floor}/{number_of_floors}',
            f'*–ü–ª–æ—â–∞–¥—å:* {area} –∫–≤.–º.',
            f'*–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* {description}',
            f'*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {encumbrance_text}',
            f'*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {children_text}',
            f'*–û—Ñ–æ—Ä–º–∏—Ç—å –≤ –∏–ø–æ—Ç–µ–∫—É:* {mortage_text}',
            f'*–¶–µ–Ω–∞:* {price} ‚ÇΩ',
            f'*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {rieltor_name}',
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞:* {agency_name}',
            f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:* {phone_number}',
            '',
            '‚ùé –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç –º–µ–Ω—é. '
            + '–ï—Å–ª–∏ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–∏—à–∏—Ç–µ @davletelvir'
        ]
    if reality == '–¥–æ–º' or reality == '—Ç–∞—É–Ω—Ö–∞—É—Å':
        text = [
            'ü•≥ _–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–Ω–µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É_ ‚ù§Ô∏èüí™üôå:',
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: *{reality}*',
            f'*–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω/—Å–µ–ª–æ:* {microregion}',
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:* {street_name}',
            f'*–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ—Å—Ç—Ä–æ–π–∫–∏:* {material}',
            f'*–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞:* {area} –∫–≤.–º.',
            f'*–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞:* {area_of_land} —Å–æ—Ç.',
            f'*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–µ–º–ª–∏ –ø–æ–¥ –¥–æ–º–æ–º:* {purpose}',
            f'*–°—Ç–µ–ø–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:* {finish}',
            f'*–°—Ç–µ–ø–µ–Ω—å –≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏–∏:* {gaz}',
            f'*–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ:* {water}',
            f'*–ü–æ–¥—ä–µ–∑–¥ –∫ –¥–æ–º—É:* {road}',
            f'*–ù–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è:* {fence}',
            f'*–ù–∞–ª–∏—á–∏–µ –±–∞–Ω–∏:* {sauna}',
            f'*–ù–∞–ª–∏—á–∏–µ –≥–∞—Ä–∞–∂–∞:* {garage}',
            f'*–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* {description}',
            f'*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {encumbrance_text}',
            f'*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {children_text}',
            f'*–û—Ñ–æ—Ä–º–∏—Ç—å –≤ –∏–ø–æ—Ç–µ–∫—É:* {mortage_text}',
            f'*–¶–µ–Ω–∞:* {price} ‚ÇΩ',
            f'*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {rieltor_name}',
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞:* {agency_name}',
            f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:* {phone_number}',
            '',
            '‚ùé –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç –º–µ–Ω—é. '
            + '–ï—Å–ª–∏ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–∏—à–∏—Ç–µ @davletelvir'
        ]
    if reality == '—É—á–∞—Å—Ç–æ–∫':
        text = [
            'ü•≥ _–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–Ω–µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É_ ‚ù§Ô∏èüí™üôå:',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: *–£—á–∞—Å—Ç–æ–∫*',
            f'*–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω/—Å–µ–ª–æ:* {microregion}',
            f'*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–µ–º–ª–∏ –ø–æ–¥ –¥–æ–º–æ–º:* {purpose}',
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:* {land_street_name}',
            f'*–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞:* {number_of_land}',
            f'*–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞:* {area_of_land} —Å–æ—Ç.',
            f'*–°—Ç–µ–ø–µ–Ω—å –≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏–∏:* {gaz}',
            f'*–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ:* {water}',
            f'*–ü–æ–¥—ä–µ–∑–¥ –∫ –¥–æ–º—É:* {road}',
            f'*–ù–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è:* {fence}',
            f'*–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* {description}',
            f'*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {encumbrance_text}',
            f'*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {children_text}',
            f'*–û—Ñ–æ—Ä–º–∏—Ç—å –≤ –∏–ø–æ—Ç–µ–∫—É:* {mortage_text}',
            f'*–¶–µ–Ω–∞:* {price} ‚ÇΩ',
            f'*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {rieltor_name}',
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞:* {agency_name}',
            f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:* {phone_number}',
            '',
            '‚ùé –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç –º–µ–Ω—é. '
            + '–ï—Å–ª–∏ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–∏—à–∏—Ç–µ @davletelvir'
        ]
    return text


# @bot.message_handler(func=lambda message: message.chat.id not in users)
# def some(message):
#     bot.send_message(
#         message.chat.id,
#         '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: 390‚ÇΩ –∑–∞ –º–µ—Å—è—Ü –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º.'
#         # + '\n1 –º–µ—Å—è—Ü - 390‚ÇΩ,\n3 –º–µ—Å—è—Ü–∞ - 1050‚ÇΩ,\n6 –º–µ—Å—è—Ü–µ–≤ - 1990‚ÇΩ.'
#         + '\n–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @davletelvir –∏ –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞.'
#     )


@bot.message_handler(commands=['deleteobject'])
def delete_object(message):
    bot.send_message(
        message.chat.id,
        '‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ '
        + '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, –¥–∞ –±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ @davletelvir –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π '
        + '—Ñ–æ—Ä–º–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏ –µ–≥–æ id - –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /myobjects. '
        + '–ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '
        + '—Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å 2—Ö, –õ–µ–Ω–∏–Ω–∞ 7, id 45."'
    )


@bot.message_handler(commands=['myobjects'])
def enter_phone_number_my_objects(message):
    bot.send_message(
        message.chat.id,
        '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö'
    )
    bot.register_next_step_handler(message, get_phone_number_my_objects)


def get_phone_number_my_objects(message):
    apartment_queryset = Apartment.objects.filter(phone_number=message.text)
    room_queryset = Room.objects.filter(phone_number=message.text)
    house_queryset = House.objects.filter(phone_number=message.text)
    townhouse_queryset = TownHouse.objects.filter(phone_number=message.text)
    land_queryset = Land.objects.filter(phone_number=message.text)

    apartment_count = apartment_queryset.count()
    room_count = room_queryset.count()
    house_count = house_queryset.count()
    townhouse_count = townhouse_queryset.count()
    land_count = land_queryset.count()

    total_count = apartment_count + room_count + house_count + townhouse_count + land_count

    bot.send_message(
        message.chat.id,
        f'–£ –≤–∞—Å *{total_count}* –æ–±—ä–µ–∫—Ç–∞ (-–æ–≤):\n'
        + f'–∫–≤–∞—Ä—Ç–∏—Ä - {apartment_count},\n'
        + f'–∫–æ–º–Ω–∞—Ç - {room_count},\n'
        + f'–¥–æ–º–æ–≤ - {house_count},\n'
        + f'—Ç–∞—É–Ω—Ö–∞—É—Å–æ–≤ - {townhouse_count},\n'
        + f'—É—á–∞—Å—Ç–∫–æ–≤ - {land_count}',
        parse_mode="Markdown"
    )
    for item in apartment_queryset:
        bot.send_message(
            message.chat.id,
            f'id {item.pk}, *{item.room_quantity} –∫.–∫–≤.* '
            + f'{item.street_name} –¥.{item.number_of_house}, '
            + f'{item.floor} —ç—Ç–∞–∂ - *{int(item.price)} ‚ÇΩ*'
        )

    for item in room_queryset:
        bot.send_message(
            message.chat.id,
            f'id {item.pk}, *–∫–æ–º–Ω.* {item.street_name} '
            + f'–¥.{item.number_of_house}, {item.floor} —ç—Ç–∞–∂ - *{int(item.price)} ‚ÇΩ*'
        )

    for item in house_queryset:
        bot.send_message(
            message.chat.id,
            f'id {item.pk}, *–î–æ–º* {item.microregion}, {item.street_name} - *{int(item.price)} ‚ÇΩ*'
        )

    for item in townhouse_queryset:
        bot.send_message(
            message.chat.id,
            f'id {item.pk}, *–¢–∞—É–Ω—Ö–∞—É—Å* {item.microregion}, {item.street_name} - *{int(item.price)} ‚ÇΩ*'
        )

    for item in land_queryset:
        bot.send_message(
            message.chat.id,
            f'id {item.pk}, *–£—á–∞—Å—Ç–æ–∫* {item.microregion}, {item.street_name} - {int(item.price)} ‚ÇΩ'
        )

    # if total_count <= 5:
    #     bot.send_message(
    #         message.chat.id,
    #         '–î–∞... –º–∞–ª–æ–≤–∞—Ç–æ –±—É–¥–µ—Ç üôà. –ù–∞–¥–æ –µ—â—ë –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤ –±–∞–∑—É!\n'
    #         + '–í–µ–¥—å —á–µ–º –±–æ–ª—å—à–µ –æ–±—ä–µ–∫—Ç–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∏–µ–ª—Ç–æ—Ä!\n'
    #         + '–í –∞–≥–µ–Ω—Ç—Å—Ç–≤–µ "–†–µ–≥–∏–æ–Ω" –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–∞—Å—Ç–µ—Ä –†–∞—É—Ñ üë¥. –ú–æ–∂–µ—à—å —É –Ω–µ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç—å, –∫–∞–∫ –º–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞—Ç–∞—â–∏—Ç—å üòÖ'
    #     )

    # if (total_count > 5) and (total_count <= 10):
    #     bot.send_message(
    #         message.chat.id,
    #         '–ù—É... –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å... –ù–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –µ—â—ë –±—ã –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n'
    #         + '–í–µ–¥—å —á–µ–º –±–æ–ª—å—à–µ –æ–±—ä–µ–∫—Ç–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∏–µ–ª—Ç–æ—Ä!\n'
    #         + '–°–ø–æ—Ä–∏–º, —É —Ç–µ–±—è –≤—Å—ë —Ä–∞–≤–Ω–æ –º–µ–Ω—å—à–µ –æ–±—ä–µ–∫—Ç–æ–≤, —á–µ–º —É –º–∞—Å—Ç–µ—Ä–∞ –î–∏–º—ã –ì—Ä–∞–º–µ–Ω–∏—Ü–∫–æ–≥–æ üë¥ —Å "–ü—Ä–æ—Å–ø–µ–∫—Ç–∞"? üòÖ'
    #     )

    # if (total_count > 15):
    #     bot.send_message(
    #         message.chat.id,
    #         '–≠–π, –ø–æ–ª–µ–≥—á–µ, —Ç—ã  –∂–µ –Ω–µ –æ–¥–∏–Ω —Ä–∏–µ–ª—Ç–æ—Ä –≤ –≥–æ—Ä–æ–¥–µ, –æ—Å—Ç–∞–≤—å –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏–º! üòÖ'
    #     )


@bot.message_handler(commands=['editprice'])
def enter_phone_number_edit_price(message):
    bot.send_message(
        message.chat.id,
        '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö'
    )
    bot.register_next_step_handler(message, get_phone_number_edit_price)


def get_phone_number_edit_price(message):
    global phone_number
    phone_number = message.text
    _keyboard = InlineKeyboardMarkup()
    buttons = ['1–∫.–∫–≤.', '2–∫.–∫–≤.', '3–∫.–∫–≤.', '4–∫.–∫–≤.', '5–∫.–∫–≤.', '–ö–æ–º–Ω–∞—Ç–∞', '–î–æ–º', '–¢–∞—É–Ω—Ö–∞—É—Å', '–£—á–∞—Å—Ç–æ–∫']

    for i in range(0, len(buttons)):
        _keyboard.add(
            InlineKeyboardButton(
                buttons[i], callback_data=f'edit_{buttons[i]}'
                )
        )
    bot.send_message(
        message.from_user.id,
        'üîª –£–∫–∞–∂–∏—Ç–µ –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å',
        reply_markup=_keyboard
    )


def get_pk_edit_price(message):
    global pk
    if message.text == '/myobjects':
        bot.send_message(
            message.from_user.id,
            '–ù–∞–∂–º–∏—Ç–µ  /myobjects'
        )
    else:
        pk = message.text
        bot.send_message(
            message.from_user.id,
            'üîª –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É. –ü—Ä–æ—Å—Ç–æ –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏, '
            + '–Ω–µ —Å–æ–∫—Ä–∞—â–∞—è, –∏ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –†, —Ä, ‚ÇΩ, —Ä—É–±. –∏ —Ç.–ø. –ï—Å–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å '
            + '—Å—Ç–æ–∏—Ç 3400000 —Ä—É–±–ª–µ–π, –∑–Ω–∞—á–∏—Ç —Ç–∞–∫ –∏ –ø–∏—à–∏—Ç–µ 3400000'
        )
        bot.register_next_step_handler(message, edit_price)


def edit_price(message):
    if objects_group == 'Apartment':
        try:
            queryset = Apartment.objects.get(pk=pk, phone_number=phone_number)
            queryset.price = int(message.text)
            queryset.save()
            bot.send_message(
                message.from_user.id,
                '–°–¥–µ–ª–∞–Ω–æ!'
            )
        except (ValueError):
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.'
            )
        except Exception as e:
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏–ª–∏ '
                + '–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.\n'
            )
            logging.error(f'{e}')

    if objects_group == 'Room':
        try:
            queryset = Room.objects.get(pk=pk, phone_number=phone_number)
            queryset.price = int(message.text)
            queryset.save()
            bot.send_message(
                message.from_user.id,
                '–°–¥–µ–ª–∞–Ω–æ!'
            )
        except (ValueError):
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.'
            )
        except Exception as e:
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏–ª–∏ '
                + '–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.\n'
            )
            logging.error(f'{e}')

    if objects_group == 'House':
        try:
            queryset = House.objects.get(pk=pk, phone_number=phone_number)
            queryset.price = int(message.text)
            queryset.save()
            bot.send_message(
                message.from_user.id,
                '–°–¥–µ–ª–∞–Ω–æ!'
            )
        except (ValueError):
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.'
            )
        except Exception as e:
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ '
                + '—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.\n'
            )
            logging.error(f'{e}')

    if objects_group == 'TownHouse':
        try:
            queryset = TownHouse.objects.get(pk=pk, phone_number=phone_number)
            queryset.price = int(message.text)
            queryset.save()
            bot.send_message(
                message.from_user.id,
                '–°–¥–µ–ª–∞–Ω–æ!'
            )
        except (ValueError):
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.'
            )
        except Exception as e:
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ '
                + '—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.\n'
            )
            logging.error(f'{e}')

    if objects_group == 'Land':
        try:
            queryset = Land.objects.get(pk=pk, phone_number=phone_number)
            queryset.price = int(message.text)
            queryset.save()
            bot.send_message(
                message.from_user.id,
                '–°–¥–µ–ª–∞–Ω–æ!'
            )
        except (ValueError):
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.'
            )
        except Exception as e:
            bot.send_message(
                message.from_user.id,
                'üßê –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ '
                + '—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /editprice.\n'
            )
            logging.error(f'{e}')


@bot.message_handler(commands=['getstatistics'])
def get_statistics(message):
    bot.send_message(message.from_user.id, '–†–∞–∑–¥–µ–ª –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')


@bot.message_handler(commands=['about'])
def about(message):
    bot.send_message(message.from_user.id, '\n'.join(about_text), parse_mode="Markdown")


@bot.message_handler(commands=['searchobjects'])
def search_objects(message):

    mc_quantity = Room.objects.count()
    house_quantity = House.objects.count()
    townhouse_quantity = TownHouse.objects.count()
    land_quantity = Land.objects.count()
    apartment_quantity = Apartment.objects.count()

    category_keyboard = InlineKeyboardMarkup()
    buttons = ['–ö–≤–∞—Ä—Ç–∏—Ä—ã', '–ö–æ–º–Ω–∞—Ç—ã', '–î–æ–º–∞', '–¢–∞—É–Ω—Ö–∞—É—Å—ã', '–£—á–∞—Å—Ç–∫–∏']
    quantity = [
        apartment_quantity,
        mc_quantity,
        house_quantity,
        townhouse_quantity,
        land_quantity
    ]

    for i in range(0, len(buttons)):
        category_keyboard.add(
            InlineKeyboardButton(
                buttons[i]+' ('+str(quantity[i])+')',
                callback_data=f'{buttons[i]}'
                )
        )

    bot.send_message(
        message.from_user.id,
        'üîª –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞',
        reply_markup=category_keyboard
    )


@bot.message_handler(commands=['addobject'])
def add_object(message):
    category_keyboard = InlineKeyboardMarkup()
    buttons = ['–ö–≤–∞—Ä—Ç–∏—Ä—É', '–ö–æ–º–Ω–∞—Ç—É', '–î–æ–º', '–¢–∞—É–Ω—Ö–∞—É—Å', '–£—á–∞—Å—Ç–æ–∫']

    for i in range(0, len(buttons)):
        category_keyboard.add(
            InlineKeyboardButton(
                buttons[i], callback_data=f'{buttons[i]}'
                )
        )

    bot.send_message(
        message.from_user.id,
        'üîª –ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?', reply_markup=category_keyboard
    )


def get_street_name(message):
    global street_name
    street_name = message.text
    bot.send_message(
        message.from_user.id,
        'üîª –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ _5, 5–ê, 91 –∫–æ—Ä–ø.3_',
        parse_mode="Markdown"
    )
    bot.register_next_step_handler(message, get_number_of_house)


def get_land_street_name(message):
    global land_street_name
    land_street_name = message.text
    bot.send_message(
        message.from_user.id,
        'üîª –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ _5, 5–ê_',
        parse_mode="Markdown"
    )
    bot.register_next_step_handler(message, get_number_of_land)


def get_number_of_land(message):
    global number_of_land
    number_of_land = message.text
    bot.send_message(
        message.from_user.id,
        'üîª –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –≤ —Å–æ—Ç–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '
        + '—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." (—Ç–æ—á–∫—É) –¥–ª—è —Ü–µ–ª–æ–π –∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç–∏'
    )
    bot.register_next_step_handler(message, get_land_area)


def get_number_of_house(message):
    global number_of_house
    number_of_house = message.text

    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–ª–ª–±—ç–∫_–¥–∞—Ç. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ = 18"""
    keyboard = InlineKeyboardMarkup()
    buttons_text = [str(i) for i in range(1, 19)]
    _callback_data = [str(i) + 'floor' for i in range(1, 19)]

    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ 18 —ç—Ç–∞–∂–µ–π, —à–µ—Å—Ç—å –≤ —Ç—Ä–∏ —Ä—è–¥–∞."""
    for j in range(0, 3):
        _button = [InlineKeyboardButton(text=buttons_text[i], callback_data=_callback_data[i]) for i in range(j * 6, 6 + 6 * j)]
        keyboard.row(*_button)

    bot.send_message(message.from_user.id, 'üîª –£–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂', reply_markup=keyboard)


def get_area(message):
    global area
    try:
        area = float(message.text)
        bot.send_message(
            message.from_user.id, 'üîª –ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É. –ü—Ä–æ—Å—Ç–æ –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏, '
            + '–Ω–µ —Å–æ–∫—Ä–∞—â–∞—è, –∏ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –†, —Ä, ‚ÇΩ, —Ä—É–±. –∏ —Ç.–ø. –ï—Å–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å '
            + '—Å—Ç–æ–∏—Ç 3400000 —Ä—É–±–ª–µ–π, –∑–Ω–∞—á–∏—Ç —Ç–∞–∫ –∏ –ø–∏—à–∏—Ç–µ 3400000'
        )
        bot.register_next_step_handler(message, get_price)
    except (ValueError) as e:
        bot.send_message(
            message.from_user.id, 'ü§î –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏. –ü–ª–æ—â–∞–¥—å'
            + ' —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." –¥–ª—è '
            + '–¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –¢–∞–∫ –∂–µ –ù–ï —É–∫–∞–∑—ã–≤–∞–π—Ç—å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. '
            + ''
            + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ /addobject'
        )
        logging.error(f'{e}')


def get_home_street_name(message):
    global street_name
    street_name = message.text
    bot.send_message(
        message.from_user.id,
        'üîª –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –¥–æ–º–∞ –≤ –∫–≤.–º. '
        + '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." (—Ç–æ—á–∫—É) –¥–ª—è —Ü–µ–ª–æ–π –∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç–∏'
    )
    bot.register_next_step_handler(message, get_home_area)


def get_home_area(message):
    global area
    try:
        area = float(message.text)
        bot.send_message(
            message.from_user.id,
            'üîª –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –≤ —Å–æ—Ç–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '
            + '"." (—Ç–æ—á–∫—É) –¥–ª—è —Ü–µ–ª–æ–π –∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç–∏'
        )
        bot.register_next_step_handler(message, get_land_area)
    except ValueError as e:
        bot.send_message(
            message.from_user.id, 'ü§î –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏. –ü–ª–æ—â–∞–¥—å'
            + ' —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." –¥–ª—è'
            + '–¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –¢–∞–∫ –∂–µ –ù–ï —É–∫–∞–∑—ã–≤–∞–π—Ç—å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. '
            + ''
            + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ /addobject'
        )
        logging.error(f'{e}')


def get_land_area(message):
    global area_of_land
    try:
        area_of_land = float(message.text)
        bot.send_message(
            message.from_user.id, 'üîª –ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É. –ü—Ä–æ—Å—Ç–æ –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏, '
            + '–Ω–µ —Å–æ–∫—Ä–∞—â–∞—è, –∏ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –†, —Ä, ‚ÇΩ, —Ä—É–±. –∏ —Ç.–ø. –ï—Å–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å '
            + '—Å—Ç–æ–∏—Ç 3400000 —Ä—É–±–ª–µ–π, –∑–Ω–∞—á–∏—Ç —Ç–∞–∫ –∏ –ø–∏—à–∏—Ç–µ 3400000'
        )
        bot.register_next_step_handler(message, get_price)
    except ValueError as e:
        bot.send_message(
            message.from_user.id, 'ü§î –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏. –ü–ª–æ—â–∞–¥—å'
            + ' —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." –¥–ª—è'
            + '–¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –¢–∞–∫ –∂–µ –ù–ï —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. '
            + '' 
            + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ /addobject'
        )
        logging.error(f'{e}')


def get_price(message):
    global price
    try:
        price = int(message.text)
        bot.send_message(
            message.from_user.id, 'üîª –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n'
            + '–î–ª—è –∫–≤–∞—Ä—Ç–∏—Ä: –æ–∫–Ω–∞, –¥–≤–µ—Ä–∏ –∏ —Ç.–ø.\n'
            + '–î–ª—è –∫–æ–º–Ω–∞—Ç: –í–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ, —Å–∞—É–Ω–∑–µ–ª –Ω–∞ —Å–∫–æ–ª—å–∫–æ, –ø–∏—Å—å–º–∞ –≥–æ—Ç–æ–≤—ã –Ω–µ—Ç.\n'
            + '–î–ª—è —É—á–∞—Å—Ç–∫–æ–≤ - —Ä–æ–≤–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç, –µ—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–∂/–±–∞–Ω—è –∏–ª–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç'
        )
        bot.register_next_step_handler(message, get_description)

    except ValueError as e:
        bot.send_message(
            message.from_user.id, 'ü§î –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã. –¶–µ–Ω—É'
            + ' —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è "." –∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. '
            + '' 
            + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ /addobject'
        )
        logging.error(f'{e}')


def get_description(message):
    global description
    description = message.text

    keyboard = InlineKeyboardMarkup()
    key_1 = InlineKeyboardButton(text='–î–∞', callback_data='yes_encumbrance')
    key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_encumbrance')
    keyboard.row(key_1, key_2)
    if reality == '–¥–æ–º' or reality == '—Ç–∞—É–Ω—Ö–∞—É—Å' or reality == '—É—á–∞—Å—Ç–æ–∫':
        bot.send_message(message.from_user.id, f'üîª {reality} –≤ –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–∏?', reply_markup=keyboard)
    else:
        bot.send_message(message.from_user.id, f'üîª {reality}–∞ –≤ –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–∏?', reply_markup=keyboard)


def get_phone_number(message):
    global phone_number
    phone_number = message.text
    bot.send_message(message.from_user.id, 'üîª –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è')
    bot.register_next_step_handler(message, get_rieltor_name)


def get_rieltor_name(message):
    global rieltor_name
    rieltor_name = message.text
    bot.send_message(
        message.from_user.id,
        'üîª –í –∫–∞–∫–æ–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–µ –≤—ã —Ç—Ä—É–¥–∏—Ç–µ—Å—å? –ï—Å–ª–∏ –≤—ã —á–∞—Å—Ç–Ω—ã–π —Ä–∏–µ–ª—Ç–æ—Ä, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ß–∞—Å—Ç–Ω—ã–π"'
    )
    bot.register_next_step_handler(message, get_agency_name)


def get_agency_name(message):
    global agency_name
    agency_name = message.text
    result_text = apartment_description_result()

    pub_date = dt.datetime.now()

    cursor = db_connection.cursor()
    if reality == '–∫–≤–∞—Ä—Ç–∏—Ä':
        try:
            data = (
                room_quantity, street_name, number_of_house, floor,
                number_of_floors, area, description, pub_date,
                rieltor_name, agency_name, children, encumbrance,
                mortage, phone_number, price
            )
            query = 'INSERT INTO baza_apartment (room_quantity, street_name, number_of_house, floor, number_of_floors, area, description, pub_date, author, agency, children, encumbrance, mortage, phone_number, price) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'
            cursor.execute(query, data)
            db_connection.commit()

            bot.send_message(message.from_user.id, '\n'.join(result_text), parse_mode="Markdown")
        except Exception as e:
            bot.send_message(
                message.from_user.id,
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ. '
                + '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /davletelvir'
            )
            logging.error(f'{e}')
        finally:
            cursor.close()

    if reality == '–∫–æ–º–Ω–∞—Ç':
        try:
            data = (
                street_name, number_of_house, floor, number_of_floors,
                area, description, pub_date, rieltor_name,
                agency_name, children, encumbrance,
                mortage, phone_number, price
            )
            query = 'INSERT INTO baza_room (street_name, number_of_house, floor, number_of_floors, area, description, pub_date, author, agency_name, children, encumbrance, mortage, phone_number, price) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'
            cursor.execute(query, data)
            db_connection.commit()
            cursor.close()

            bot.send_message(message.from_user.id, '\n'.join(result_text), parse_mode="Markdown")

        except Exception as e:
            bot.send_message(
                message.from_user.id,
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ. '
                + '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /davletelvir'
            )
            logging.error(f'{e}')
        finally:
            cursor.close()

    if reality == '–¥–æ–º':
        try:
            data = (
                street_name,
                area, description, price, pub_date, rieltor_name,
                phone_number, agency_name, children, encumbrance,
                mortage, microregion, gaz, water, road, area_of_land,
                material, finish, purpose, sauna, garage, fence
            )
            query = 'INSERT INTO baza_house (street_name, area, description, price, pub_date, author, phone_number, agency_name, children, encumbrance, mortage, microregion, gaz, water, road, area_of_land, material, finish, purpose, sauna, garage, fence) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'
            cursor.execute(query, data)
            db_connection.commit()
            cursor.close()

            bot.send_message(message.from_user.id, '\n'.join(result_text), parse_mode="Markdown")

        except Exception as e:
            bot.send_message(
                message.from_user.id,
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ. '
                + '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /davletelvir'
            )
            logging.error(f'{e}')
        finally:
            cursor.close()

    if reality == '—Ç–∞—É–Ω—Ö–∞—É—Å':
        try:
            data = (
                street_name,
                area, description, price, pub_date, rieltor_name,
                phone_number, agency_name, children, encumbrance,
                mortage, microregion, gaz, water, road, area_of_land,
                material, finish, purpose, sauna, garage, fence
            )
            query = 'INSERT INTO baza_townhouse (street_name, area, description, price, pub_date, author, phone_number, agency_name, children, encumbrance, mortage, microregion, gaz, water, road, area_of_land, material, finish, purpose, sauna, garage, fence) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'
            cursor.execute(query, data)
            db_connection.commit()
            cursor.close()

            bot.send_message(message.from_user.id, '\n'.join(result_text), parse_mode="Markdown")

        except Exception as e:
            bot.send_message(
                message.from_user.id,
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
                + ''
                + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /davletelvir'
            )
            logging.error(f'{e}')
        finally:
            cursor.close()

    if reality == '—É—á–∞—Å—Ç–æ–∫':
        try:
            data = (
                land_street_name, number_of_land,
                description, price, pub_date, rieltor_name,
                phone_number, agency_name, children, encumbrance,
                mortage, microregion, gaz, water, road, area_of_land,
                purpose, fence
            )
            query = 'INSERT INTO baza_land (street_name, number_of_land, description, price, pub_date, author, phone_number, agency_name, children, encumbrance, mortage, microregion, gaz, water, road, area_of_land, purpose, fence) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'
            cursor.execute(query, data)
            db_connection.commit()
            cursor.close()

            bot.send_message(message.from_user.id, '\n'.join(result_text), parse_mode="Markdown")

        except Exception as e:
            bot.send_message(
                message.from_user.id,
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
                + ''
                + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /davletelvir'
            )
            logging.error(f'{e}')
        finally:
            cursor.close()


@bot.callback_query_handler(func=lambda callback: callback.data)
def callback_worker(callback):

    one_room_quantity = Apartment.objects.filter(room_quantity=1).count()
    two_room_quantity = Apartment.objects.filter(room_quantity=2).count()
    three_room_quantity = Apartment.objects.filter(room_quantity=3).count()
    four_room_quantity = Apartment.objects.filter(room_quantity=4).count()
    five_room_quantity = Apartment.objects.filter(room_quantity=5).count()

    apartament_keyboard = InlineKeyboardMarkup()
    if callback.data == '–ö–≤–∞—Ä—Ç–∏—Ä—ã':
        buttons = ['1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '4-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '5-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '‚è™ –ù–∞–∑–∞–¥']
        quantity = [one_room_quantity, two_room_quantity, three_room_quantity, four_room_quantity, five_room_quantity]

        for i in range(0, len(buttons)-1):
            apartament_keyboard.add(InlineKeyboardButton(buttons[i]+' ('+str(quantity[i])+')', callback_data=f'{buttons[i]}'))
        apartament_keyboard.add(InlineKeyboardButton(buttons[len(buttons)-1], callback_data=f'{buttons[len(buttons)-1]}'))

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç',
            reply_markup=apartament_keyboard
        )

    elif callback.data == '–ö–æ–º–Ω–∞—Ç—ã':
        query_set = Room.objects.order_by('-pub_date')

        bot.send_message(
            callback.from_user.id, '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *–∫–æ–º–Ω–∞—Ç–∞–º*:', parse_mode="Markdown"
        )
        for item in query_set:
            if item.children is True:
                ch_text = '–ï—Å—Ç—å'
            else:
                ch_text = '–ù–µ—Ç'

            if item.mortage is True:
                mor_text = '–ï—Å—Ç—å'
            else:
                mor_text = '–ù–µ—Ç'

            if item.encumbrance is True:
                enc_text = '–ï—Å—Ç—å'
            else:
                enc_text = '–ù–µ—Ç'

            bot.send_message(
                callback.from_user.id,
                f'üî∏ _–ö–æ–º–Ω–∞—Ç–∞ {item.street_name} –¥.{item.number_of_house}_'
                + f'\n*–≠—Ç–∞–∂:* {item.floor}/{item.number_of_floors}'
                + f'\n*–ü–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã:* {item.area} –∫–≤.–º.'
                + f'\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description} '
                + f'\n*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {enc_text} '
                + f'\n*–ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {ch_text}'
                + f'\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –∏–ø–æ—Ç–µ–∫—É:* {mor_text}'
                + f'\n*–¶–µ–Ω–∞:* {int(item.price)} ‚ÇΩ'
                + f'\n*–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:* {item.agency_name}'
                + f'\n*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {item.author}'
                + f'\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {item.phone_number}'
                + f'\n*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {item.pub_date.date()}',
                parse_mode="Markdown"
            )

    elif callback.data == '–î–æ–º–∞':
        query_set = House.objects.order_by('-pub_date')

        bot.send_message(
            callback.from_user.id, '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *–¥–æ–º–∞–º*:', parse_mode="Markdown"
        )
        for item in query_set:
            if item.children is True:
                ch_text = '–ï—Å—Ç—å'
            else:
                ch_text = '–ù–µ—Ç'

            if item.mortage is True:
                mor_text = '–ï—Å—Ç—å'
            else:
                mor_text = '–ù–µ—Ç'

            if item.encumbrance is True:
                enc_text = '–ï—Å—Ç—å'
            else:
                enc_text = '–ù–µ—Ç'

            bot.send_message(
                callback.from_user.id,
                f'üî∏ _–î–æ–º {item.microregion}, {item.street_name}_'
                + f'\n*–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞:* {item.area} –∫–≤.–º.'
                + f'\n*–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞:* {item.area_of_land} —Å–æ—Ç.'
                + f'\n*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞:* {item.purpose}'
                + f'\n*–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω:* {item.material}'
                + f'\n*–°—Ç–µ–ø–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏:* {item.finish}'
                + f'\n*–°—Ç–µ–ø–µ–Ω—å –≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏–∏:* {item.gaz}'
                + f'\n*–í–æ–¥–∞:* {item.water}'
                + f'\n*–ü–æ–¥—ä–µ–∑–¥ –∫ —É—á–∞—Å—Ç–∫—É:* {item.road}'
                + f'\n*–ù–∞–ª–∏—á–∏–µ –±–∞–Ω–∏/—Å–∞—É–Ω—ã:* {item.sauna}'
                + f'\n*–ù–∞–ª–∏—á–∏–µ –≥–∞—Ä–∞–∂–∞:* {item.garage}'
                + f'\n*–ù–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è:* {item.fence}'
                + f'\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description}'
                + f'\n*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {enc_text}'
                + f'\n*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {ch_text}'
                + f'\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –∏–ø–æ—Ç–µ–∫—É:* {mor_text}'
                + f'\n*–¶–µ–Ω–∞:* {int(item.price)} ‚ÇΩ'
                + f'\n*–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:* {item.agency_name}'
                + f'\n*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {item.author}'
                + f'\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {item.phone_number}'
                + f'\n*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {item.pub_date.date()}',
                parse_mode="Markdown"
            )

    elif callback.data == '–¢–∞—É–Ω—Ö–∞—É—Å—ã':
        query_set = TownHouse.objects.order_by('-pub_date')

        bot.send_message(
            callback.from_user.id, '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *—Ç–∞—É–Ω—Ö–∞—É—Å–∞–º*:', parse_mode="Markdown"
        )
        for item in query_set:
            if item.children is True:
                ch_text = '–ï—Å—Ç—å'
            else:
                ch_text = '–ù–µ—Ç'

            if item.mortage is True:
                mor_text = '–ï—Å—Ç—å'
            else:
                mor_text = '–ù–µ—Ç'

            if item.encumbrance is True:
                enc_text = '–ï—Å—Ç—å'
            else:
                enc_text = '–ù–µ—Ç'

            bot.send_message(
                callback.from_user.id,
                f'üî∏ _–¢–∞—É–Ω—Ö–∞—É—Å {item.microregion}, {item.street_name}_'
                + f'\n*–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞:* {item.area} –∫–≤.–º.'
                + f'\n*–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞:* {item.area_of_land} —Å–æ—Ç.'
                + f'\n*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞:* {item.purpose}'
                + f'\n*–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω:* {item.material}'
                + f'\n*–°—Ç–µ–ø–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏:* {item.finish}'
                + f'\n*–°—Ç–µ–ø–µ–Ω—å –≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏–∏:* {item.gaz}'
                + f'\n*–í–æ–¥–∞:* {item.water}'
                + f'\n*–ü–æ–¥—ä–µ–∑–¥ –∫ —É—á–∞—Å—Ç–∫—É:* {item.road}'
                + f'\n*–ù–∞–ª–∏—á–∏–µ –±–∞–Ω–∏/—Å–∞—É–Ω—ã:* {item.sauna}'
                + f'\n*–ù–∞–ª–∏—á–∏–µ –≥–∞—Ä–∞–∂–∞:* {item.garage}'
                + f'\n*–ù–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è:* {item.fence}'
                + f'\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description}'
                + f'\n*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {enc_text}'
                + f'\n*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {ch_text}'
                + f'\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –∏–ø–æ—Ç–µ–∫—É:* {mor_text}'
                + f'\n*–¶–µ–Ω–∞:* {int(item.price)} ‚ÇΩ'
                + f'\n*–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:* {item.agency_name}'
                + f'\n*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {item.author}'
                + f'\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {item.phone_number}'
                f'\n*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {item.pub_date.date()}',
                parse_mode="Markdown"
            )

    elif callback.data == '–£—á–∞—Å—Ç–∫–∏':
        query_set = Land.objects.order_by('-pub_date')

        bot.send_message(
            callback.from_user.id, '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *—É—á–∞—Å—Ç–∫–∞–º*:', parse_mode="Markdown"
        )
        for item in query_set:
            if item.children is True:
                ch_text = '–ï—Å—Ç—å'
            else:
                ch_text = '–ù–µ—Ç'

            if item.mortage is True:
                mor_text = '–ï—Å—Ç—å'
            else:
                mor_text = '–ù–µ—Ç'

            if item.encumbrance is True:
                enc_text = '–ï—Å—Ç—å'
            else:
                enc_text = '–ù–µ—Ç'

            bot.send_message(
                callback.from_user.id,
                f'üî∏ _–£—á–∞—Å—Ç–æ–∫ {item.microregion}, {item.street_name} —É—á.{item.number_of_land} _'
                + f'\n*–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞:* {item.area_of_land} —Å–æ—Ç.'
                + f'\n*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞:* {item.purpose}'
                + f'\n*–°—Ç–µ–ø–µ–Ω—å –≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏–∏:* {item.gaz}'
                + f'\n*–í–æ–¥–∞:* {item.water}'
                + f'\n*–ü–æ–¥—ä–µ–∑–¥ –∫ —É—á–∞—Å—Ç–∫—É:* {item.road}'
                + f'\n*–ù–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è:* {item.fence}'
                + f'\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description}'
                + f'\n*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {enc_text}'
                + f'\n*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {ch_text}'
                + f'\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –∏–ø–æ—Ç–µ–∫—É:* {mor_text}'
                + f'\n*–¶–µ–Ω–∞:* {int(item.price)} ‚ÇΩ'
                + f'\n*–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:* {item.agency_name}'
                + f'\n*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {item.author}'
                + f'\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {item.phone_number}'
                + f'\n*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {item.pub_date.date()}',
                parse_mode="Markdown"
            )

    elif callback.data == '1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ':
        query = Apartment.objects.filter(room_quantity=1).order_by('-pub_date')

        bot.send_message(
            callback.from_user.id, '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *1-–∫–æ–º–Ω–∞—Ç–Ω—ã–º* –∫–≤–∞—Ä—Ç–∏—Ä–∞–º:', parse_mode="Markdown"
        )
        for item in query:
            if item.children is True:
                ch_text = '–ï—Å—Ç—å'
            else:
                ch_text = '–ù–µ—Ç'

            if item.mortage is True:
                mor_text = '–ï—Å—Ç—å'
            else:
                mor_text = '–ù–µ—Ç'

            if item.encumbrance is True:
                enc_text = '–ï—Å—Ç—å'
            else:
                enc_text = '–ù–µ—Ç'

            bot.send_message(
                callback.from_user.id,
                f'üî∏ _1–∫.–∫–≤. {item.street_name} –¥.{item.number_of_house}_'
                + f'\n*–≠—Ç–∞–∂:* {item.floor}/{item.number_of_floors} '
                + f'\n*–ü–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:* {item.area} –∫–≤.–º.'
                + f'\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description}'
                + f'\n*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {enc_text}'
                + f'\n*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {ch_text}'
                + f'\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –∏–ø–æ—Ç–µ–∫—É:* {mor_text}'
                + f'\n*–¶–µ–Ω–∞:* {int(item.price)} ‚ÇΩ'
                + f'\n*–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:* {item.agency}'
                + f'\n*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {item.author}'
                + f'\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {item.phone_number}'
                + f'\n*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {item.pub_date.date()}',
                parse_mode="Markdown"
            )

    elif callback.data == '2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ':
        query = Apartment.objects.filter(room_quantity=2).order_by('-pub_date')

        bot.send_message(
            callback.from_user.id, '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *2-–∫–æ–º–Ω–∞—Ç–Ω—ã–º* –∫–≤–∞—Ä—Ç–∏—Ä–∞–º:', parse_mode="Markdown"
        )
        for item in query:
            if item.children is True:
                ch_text = '–ï—Å—Ç—å'
            else:
                ch_text = '–ù–µ—Ç'

            if item.mortage is True:
                mor_text = '–ï—Å—Ç—å'
            else:
                mor_text = '–ù–µ—Ç'

            if item.encumbrance is True:
                enc_text = '–ï—Å—Ç—å'
            else:
                enc_text = '–ù–µ—Ç'

            bot.send_message(
                callback.from_user.id,
                f'üî∏ _2–∫.–∫–≤. {item.street_name} –¥.{item.number_of_house}_'
                + f'\n*–≠—Ç–∞–∂:* {item.floor}/{item.number_of_floors}'
                + f'\n*–ü–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:* {item.area} –∫–≤.–º.'
                + f'\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description},'
                + f'\n*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {enc_text}'
                + f'\n*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {ch_text}'
                + f'\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –∏–ø–æ—Ç–µ–∫—É:* {mor_text}'
                + f'\n*–¶–µ–Ω–∞:* {int(item.price)} ‚ÇΩ'
                + f'\n*–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:* {item.agency} '
                + f'\n*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {item.author}'
                + f'\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {item.phone_number}'
                + f'\n*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {item.pub_date.date()}',
                parse_mode="Markdown"
            )

    elif callback.data == '3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ':
        query = Apartment.objects.filter(room_quantity=3).order_by('-pub_date')

        bot.send_message(
            callback.from_user.id, '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *3-–∫–æ–º–Ω–∞—Ç–Ω—ã–º* –∫–≤–∞—Ä—Ç–∏—Ä–∞–º:', parse_mode="Markdown"
        )
        for item in query:
            if item.children is True:
                ch_text = '–ï—Å—Ç—å'
            else:
                ch_text = '–ù–µ—Ç'

            if item.mortage is True:
                mor_text = '–ï—Å—Ç—å'
            else:
                mor_text = '–ù–µ—Ç'

            if item.encumbrance is True:
                enc_text = '–ï—Å—Ç—å'
            else:
                enc_text = '–ù–µ—Ç'

            bot.send_message(
                callback.from_user.id,
                f'üî∏ _3–∫.–∫–≤. {item.street_name} –¥.{item.number_of_house}_'
                + f'\n*–≠—Ç–∞–∂:* {item.floor}/{item.number_of_floors} '
                + f'\n*–ü–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:* {item.area} –∫–≤.–º.'
                + f'\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description}, '
                + f'\n*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {enc_text} '
                + f'\n*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {ch_text} '
                + f'\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –∏–ø–æ—Ç–µ–∫—É:* {mor_text} '
                + f'\n*–¶–µ–Ω–∞:* {int(item.price)} ‚ÇΩ'
                + f'\n*–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:* {item.agency} '
                + f'\n*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {item.author}'
                + f'\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {item.phone_number}'
                + f'\n*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {item.pub_date.date()}',
                parse_mode="Markdown"
            )

    elif callback.data == '4-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ':
        query = Apartment.objects.filter(room_quantity=4).order_by('-pub_date')

        bot.send_message(
            callback.from_user.id, '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *4-–∫–æ–º–Ω–∞—Ç–Ω—ã–º* –∫–≤–∞—Ä—Ç–∏—Ä–∞–º:', parse_mode="Markdown"
        )
        for item in query:
            if item.children is True:
                ch_text = '–ï—Å—Ç—å'
            else:
                ch_text = '–ù–µ—Ç'

            if item.mortage is True:
                mor_text = '–ï—Å—Ç—å'
            else:
                mor_text = '–ù–µ—Ç'

            if item.encumbrance is True:
                enc_text = '–ï—Å—Ç—å'
            else:
                enc_text = '–ù–µ—Ç'

            bot.send_message(
                callback.from_user.id,
                f'üî∏ _4–∫.–∫–≤. {item.street_name} –¥.{item.number_of_house}_'
                + f'\n*–≠—Ç–∞–∂:* {item.floor}/{item.number_of_floors}'
                + f'\n*–ü–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:* {item.area} –∫–≤.–º.'
                + f'\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description}, '
                + f'\n*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {enc_text}'
                + f'\n*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {ch_text}'
                + f'\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –∏–ø–æ—Ç–µ–∫—É:* {mor_text}'
                + f'\n*–¶–µ–Ω–∞:* {int(item.price)} ‚ÇΩ'
                + f'\n*–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:* {item.agency}'
                + f'\n*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {item.author}'
                + f'\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {item.phone_number}'
                + f'\n*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {item.pub_date.date()}',
                parse_mode="Markdown"
            )

    elif callback.data == '5-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ':
        query = Apartment.objects.filter(room_quantity=5).order_by('-pub_date')

        bot.send_message(
            callback.from_user.id, '‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *5-–∫–æ–º–Ω–∞—Ç–Ω—ã–º* –∫–≤–∞—Ä—Ç–∏—Ä–∞–º:', parse_mode="Markdown"
        )
        for item in query:
            if item.children is True:
                ch_text = '–ï—Å—Ç—å'
            else:
                ch_text = '–ù–µ—Ç'

            if item.mortage is True:
                mor_text = '–ï—Å—Ç—å'
            else:
                mor_text = '–ù–µ—Ç'

            if item.encumbrance is True:
                enc_text = '–ï—Å—Ç—å'
            else:
                enc_text = '–ù–µ—Ç'

            bot.send_message(
                callback.from_user.id,
                f'üî∏_5–∫.–∫–≤. {item.street_name} –¥.{item.number_of_house}_'
                + f'\n*–≠—Ç–∞–∂:* {item.floor}/{item.number_of_floors} '
                + f'\n*–ü–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:* {item.area} –∫–≤.–º.'
                + f'\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description},'
                + f'\n*–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ:* {enc_text}'
                + f'\n*–î–µ—Ç–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:* {ch_text} '
                + f'\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –∏–ø–æ—Ç–µ–∫—É:* {mor_text} '
                + f'\n*–¶–µ–Ω–∞:* {int(item.price)} ‚ÇΩ'
                + f'\n*–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:* {item.agency}'
                + f'\n*–ò–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞:* {item.author}'
                + f'\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {item.phone_number}'
                + f'\n*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {item.pub_date.date()}',
                parse_mode="Markdown"
            )

    elif callback.data == '‚è™ –ù–∞–∑–∞–¥':

        mc_quantity = Room.objects.count()
        house_quantity = House.objects.count()
        townhouse_quantity = TownHouse.objects.count()
        land_quantity = Land.objects.count()
        apartment_quantity = Apartment.objects.count()

        category_keyboard = InlineKeyboardMarkup()
        buttons = ['–ö–≤–∞—Ä—Ç–∏—Ä—ã', '–ö–æ–º–Ω–∞—Ç—ã', '–î–æ–º–∞', '–¢–∞—É–Ω—Ö–∞—É—Å—ã', '–£—á–∞—Å—Ç–∫–∏']
        quantity = [apartment_quantity, mc_quantity, house_quantity, townhouse_quantity, land_quantity]

        for i in range(0, len(buttons)):
            category_keyboard.add(InlineKeyboardButton(buttons[i]+' ('+str(quantity[i])+')', callback_data=f'{buttons[i]}'))

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞',
            reply_markup=category_keyboard
        )

    elif callback.data == '–ö–≤–∞—Ä—Ç–∏—Ä—É':
        keyboard = InlineKeyboardMarkup()
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —ç—Ç–∞–∂–µ–π 1-5"""
        _buttons = [InlineKeyboardButton(text=str(i), callback_data=str(i) + 'r') for i in range(1, 6)]
        keyboard.row(*_buttons)

        bot.send_message(
            callback.from_user.id,
            '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 14 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç '
            + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π—Ç–µ –≤–¥—É–º—á–∏–≤–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.'
            + 'üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.'
            + '\nüîª –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
            reply_markup=keyboard
        )

    elif callback.data in ['1r', '2r', '3r', '4r', '5r'] or callback.data == '–ö–æ–º–Ω–∞—Ç—É':
        if callback.data == '–ö–æ–º–Ω–∞—Ç—É':
            global reality
            reality = '–∫–æ–º–Ω–∞—Ç'
            bot.send_message(
                callback.from_user.id,
                '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 13 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç '
                + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π—Ç–µ –≤–¥—É–º—á–∏–≤–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.'
                + 'üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.'
            )

        else:
            reality = '–∫–≤–∞—Ä—Ç–∏—Ä'
            global room_quantity
            room_quantity = int(callback.data[0])
        bot.send_message(callback.from_user.id, 'üîª –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–∞–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã c –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã')
        bot.register_next_step_handler(callback.message, get_street_name)

    elif callback.data in ['–î–æ–º', '–¢–∞—É–Ω—Ö–∞—É—Å', '–£—á–∞—Å—Ç–æ–∫']:
        questions = 0
        if callback.data == '–î–æ–º':
            reality = '–¥–æ–º'
            questions = 21
        elif callback.data == '–¢–∞—É–Ω—Ö–∞—É—Å':
            questions = 21
            reality = '—Ç–∞—É–Ω—Ö–∞—É—Å'
        else:
            reality = '—É—á–∞—Å—Ç–æ–∫'
            questions = 19

        keyboard = InlineKeyboardMarkup()

        microregion_buttons_text = [
            '–ö–∞—Å—ë–≤–æ', '–í–æ—Å—Ç–æ—á–Ω—ã–π 1,2,3,4,5', '–†–æ—Ç–∫–æ–≤–æ',
            '–ú–∞—Ä–∏–Ω–æ', '–¢–µ–ª–µ–≤—ã—à–∫–∞', '–õ–µ—Å–Ω–∞—è –ø–æ–ª—è–Ω–∞',
            '–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞', '–¢–∞—à–∫–∏–Ω–æ–≤–æ', '–ù–∏–∫–æ–ª–æ-–ë–µ—Ä—ë–∑–æ–≤–∫–∞',
            '–ö—É—Ç–ª–∏–Ω–∫–∞', '–ù–æ–≤–æ–Ω–∞–≥–∞–µ–≤–æ', '–ê–∫—Ç–∞–Ω—ã—à–±–∞—à',
            '–ê–º–∑—è', '–ö–∞—Ä–º–∞–Ω–æ–≤–æ', '–ú–æ–∂–∞—Ä—ã', '–ê—Ä–ª–∞–Ω'
        ]

        _buttons = [
            InlineKeyboardButton(
                text=microregion_buttons_text[i],
                callback_data=microregion_buttons_text[i]
                ) for i in range(0, len(microregion_buttons_text) - 1)
        ]

        keyboard.row(_buttons[0], _buttons[2])
        keyboard.row(_buttons[7], _buttons[5])
        keyboard.row(_buttons[3], _buttons[4], _buttons[6])
        keyboard.row(_buttons[8], _buttons[1])
        keyboard.row(_buttons[9], _buttons[10], _buttons[11])
        keyboard.row(_buttons[12], _buttons[13], _buttons[14])

        bot.send_message(
            callback.from_user.id,
            f'–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ {questions} –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç'
            + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ß–∏—Ç–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –æ—Ç–≤–µ—á–∞–π—Ç–µ –≤–¥—É–º—á–∏–≤–æ.'
            + 'üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.'
            + '\nüîª –£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ–º–∞',
            reply_markup=keyboard
        )

    elif callback.data in [
            '–ö–∞—Å—ë–≤–æ', '–í–æ—Å—Ç–æ—á–Ω—ã–π 1,2,3,4,5', '–†–æ—Ç–∫–æ–≤–æ',
            '–ú–∞—Ä–∏–Ω–æ', '–¢–µ–ª–µ–≤—ã—à–∫–∞', '–õ–µ—Å–Ω–∞—è –ø–æ–ª—è–Ω–∞',
            '–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞', '–¢–∞—à–∫–∏–Ω–æ–≤–æ', '–ù–∏–∫–æ–ª–æ-–ë–µ—Ä—ë–∑–æ–≤–∫–∞',
            '–ö—É—Ç–ª–∏–Ω–∫–∞', '–ù–æ–≤–æ–Ω–∞–≥–∞–µ–≤–æ', '–ê–∫—Ç–∞–Ω—ã—à–±–∞—à',
            '–ê–º–∑—è', '–ö–∞—Ä–º–∞–Ω–æ–≤–æ', '–ú–æ–∂–∞—Ä—ã', '–ê—Ä–ª–∞–Ω'
    ]:
        global microregion
        microregion = callback.data
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–ò–ñ–°', callback_data='–ò–ñ–°')
        key_2 = InlineKeyboardButton(text='–°–ù–¢, –î–ù–¢', callback_data='–°–ù–¢, –î–ù–¢')
        key_3 = InlineKeyboardButton(text='–õ–ü–•', callback_data='–õ–ü–•')

        keyboard.row(key_1, key_2, key_3)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞',
            reply_markup=keyboard
        )

    elif (callback.data in ['–ò–ñ–°', '–°–ù–¢, –î–ù–¢', '–õ–ü–•']) and (reality in ['–¥–æ–º', '—Ç–∞—É–Ω—Ö–∞—É—Å']):
        global purpose
        purpose = callback.data
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ')

        keyboard.row(key_1, key_2)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –≠—Ç–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?',
            reply_markup=keyboard
        )

    elif callback.data in ['–ò–ñ–°', '–°–ù–¢, –î–ù–¢', '–õ–ü–•'] and (reality == '—É—á–∞—Å—Ç–æ–∫'):
        purpose = callback.data
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='–ü–æ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥–∞–∑')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ü–æ —É–ª–∏—Ü–µ –ù–ï –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥–∞–∑')

        keyboard.row(key_1, key_2)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –ì–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —É–ª–∏—Ü–µ?',
            reply_markup=keyboard
        )

    elif callback.data in ['–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ']:
        global finish
        finish = callback.data
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–ì–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –¥–æ–º –æ—Ç–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è', callback_data='–ì–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –¥–æ–º –æ—Ç–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è')
        key_3 = InlineKeyboardButton(text='–£–ª–∏—Ü–∞ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–Ω–∞, –¥–æ–º - –Ω–µ—Ç', callback_data='–£–ª–∏—Ü–∞ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–Ω–∞, –¥–æ–º - –Ω–µ—Ç')
        key_4 = InlineKeyboardButton(text='–£–ª–∏—Ü–∞ –Ω–µ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞', callback_data='–£–ª–∏—Ü–∞ –Ω–µ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞')

        keyboard.row(key_1)
        keyboard.row(key_3)
        keyboard.row(key_4)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –£–∫–∞–∂–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–º–∞',
            reply_markup=keyboard
        )

    elif callback.data in ['–ü–æ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥–∞–∑', '–ü–æ —É–ª–∏—Ü–µ –ù–ï –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥–∞–∑']:
        global gaz
        gaz = callback.data
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='–ü–æ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ü–æ —É–ª–∏—Ü–µ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥ –ù–ï –ø—Ä–æ—Ö–æ–¥–∏—Ç')

        keyboard.row(key_1, key_2)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –í–æ–¥–æ–ø—Ä–æ–≤–æ–¥ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —É–ª–∏—Ü–µ?',
            reply_markup=keyboard
        )

    elif callback.data in [
        '–ì–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –¥–æ–º –æ—Ç–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è',
        '–£–ª–∏—Ü–∞ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–Ω–∞, –¥–æ–º - –Ω–µ—Ç',
        '–£–ª–∏—Ü–∞ –Ω–µ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞',
    ]:
        gaz = callback.data
        keyboard = InlineKeyboardMarkup()
        material_buttons_text = [
            '–ö–∏—Ä–ø–∏—á',
            '–ó–∞–ª–∏–≤–Ω–æ–π',
            '–ë–ª–æ–∫, –æ–±–ª–∏—Ü–æ–≤–∞–Ω–Ω—ã–π –∫–∏—Ä–ø–∏—á–æ–º',
            '–î–µ—Ä–µ–≤–æ',
            '–î–µ—Ä–µ–≤–æ, –æ–±–ª–∏—Ü–æ–≤–∞–Ω–Ω–æ–µ –∫–∏—Ä–ø–∏—á–æ–º',
            '–î—Ä—É–≥–æ–µ'
        ]
        _buttons = [
            InlineKeyboardButton(
                text=material_buttons_text[i], callback_data=material_buttons_text[i]
                ) for i in range(0, len(material_buttons_text) - 1)
        ]

        for i in range(0, len(_buttons)):
            keyboard.row(_buttons[i])

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –£–∫–∞–∂–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω',
            reply_markup=keyboard
        )

    elif callback.data in [
            '–ö–∏—Ä–ø–∏—á',
            '–ó–∞–ª–∏–≤–Ω–æ–π',
            '–ë–ª–æ–∫, –æ–±–ª–∏—Ü–æ–≤–∞–Ω–Ω—ã–π –∫–∏—Ä–ø–∏—á–æ–º',
            '–î–µ—Ä–µ–≤–æ',
            '–î–µ—Ä–µ–≤–æ, –æ–±–ª–∏—Ü–æ–≤–∞–Ω–Ω–æ–µ –∫–∏—Ä–ø–∏—á–æ–º',
            '–î—Ä—É–≥–æ–µ'
    ]:
        global material
        material = callback.data
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', callback_data='–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ')
        key_2 = InlineKeyboardButton(text='–ù–∞ —É—á–∞—Å—Ç–∫–µ –µ—Å—Ç—å –∫–æ–ª–æ–¥–µ—Ü', callback_data='–ö–æ–ª–æ–¥–µ—Ü')
        key_3 = InlineKeyboardButton(text='–í–æ–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —É–ª–∏—Ü–µ, –≤ –¥–æ–º - –Ω–µ—Ç', callback_data='–í–æ–¥–∞ –µ—Å—Ç—å, –µ—ë –Ω–∞–¥–æ –ø–æ–¥–≤–æ–¥–∏—Ç—å')
        key_4 = InlineKeyboardButton(text='–í–æ–¥—ã –Ω–µ—Ç', callback_data='–í–æ–¥—ã –Ω–µ—Ç')

        keyboard.row(key_1)
        keyboard.row(key_2)
        keyboard.row(key_3)
        keyboard.row(key_4)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –í –¥–æ–º–µ –µ—Å—Ç—å –≤–æ–¥–∞?',
            reply_markup=keyboard
        )

    elif callback.data in [
        '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ',
        '–ö–æ–ª–æ–¥–µ—Ü',
        '–í–æ–¥–∞ –µ—Å—Ç—å, –µ—ë –Ω–∞–¥–æ –ø–æ–¥–≤–æ–¥–∏—Ç—å',
        '–í–æ–¥—ã –Ω–µ—Ç'
    ]:
        global water
        water = callback.data
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='–ï—Å—Ç—å –±–∞–Ω—è')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ë–∞–Ω–∏ –Ω–µ—Ç')

        keyboard.row(key_1)
        keyboard.row(key_2)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –ù–∞ —Ç–µ—Ä–∏–∏—Ç–æ—Ä–∏–∏ —É—á–∞—Å—Ç–∫–∞ –µ—Å—Ç—å –±–∞–Ω—è?',
            reply_markup=keyboard
        )

    elif callback.data in [
        '–ï—Å—Ç—å –±–∞–Ω—è',
        '–ë–∞–Ω–∏ –Ω–µ—Ç'
    ]:
        global sauna
        sauna = callback.data
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='–ï—Å—Ç—å –≥–∞—Ä–∞–∂')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ì–∞—Ä–∞–∂–∞ –Ω–µ—Ç')

        keyboard.row(key_1)
        keyboard.row(key_2)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –ù–∞ —Ç–µ—Ä–∏–∏—Ç–æ—Ä–∏–∏ —É—á–∞—Å—Ç–∫–∞ –µ—Å—Ç—å –≥–∞—Ä–∞–∂?',
            reply_markup=keyboard
        )

    elif callback.data in [
        '–ï—Å—Ç—å –≥–∞—Ä–∞–∂',
        '–ì–∞—Ä–∞–∂–∞ –Ω–µ—Ç',
        '–ü–æ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥',
        '–ü–æ —É–ª–∏—Ü–µ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥ –ù–ï –ø—Ä–æ—Ö–æ–¥–∏—Ç'
    ]:
        global garage
        garage = callback.data

        if reality == '—É—á–∞—Å—Ç–æ–∫':
            water = callback.data

        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='–£—á–∞—Å—Ç–æ–∫ –æ–≥–æ—Ä–æ–∂–µ–Ω')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–£—á–∞—Å—Ç–æ–∫ –Ω–µ –æ–≥–æ—Ä–æ–∂–µ–Ω')

        keyboard.row(key_1)
        keyboard.row(key_2)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –£—á–∞—Å—Ç–æ–∫ –æ–≥–æ—Ä–æ–∂–µ–Ω?',
            reply_markup=keyboard
        )

    elif callback.data in [
        '–£—á–∞—Å—Ç–æ–∫ –æ–≥–æ—Ä–æ–∂–µ–Ω',
        '–£—á–∞—Å—Ç–æ–∫ –Ω–µ –æ–≥–æ—Ä–æ–∂–µ–Ω'
    ]:
        global fence
        fence = callback.data
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞, –∞—Å—Ñ–∞–ª—å—Ç', callback_data='–ê—Å—Ñ–∞–ª—å—Ç')
        key_2 = InlineKeyboardButton(text='–î–∞, –Ω–µ–ø–ª–æ—Ö–∞—è –Ω–∞—Å—ã–ø–Ω–∞—è –¥–æ—Ä–æ–≥–∞', callback_data='–ù–µ–ø–ª–æ—Ö–∞—è –Ω–∞—Å—ã–ø–Ω–∞—è –¥–æ—Ä–æ–≥–∞')
        key_3 = InlineKeyboardButton(text='–î–∞, –Ω–µ–ø–ª–æ—Ö–∞—è –≥—Ä—É–Ω—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞', callback_data='–ù–µ–ø–ª–æ—Ö–∞—è –≥—Ä—É–Ω—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞')
        key_4 = InlineKeyboardButton(text='–î–≤–∏–∂–µ–Ω–∏–µ –∫ –¥–æ–º—É –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–æ', callback_data='–ë–µ–∑–¥–æ—Ä–æ–∂—å–µ, –∑–∞—Ç—Ä—É–¥–Ω—è—é—â–µ–µ –ø—Ä–æ–µ–∑–¥')

        keyboard.row(key_1)
        keyboard.row(key_2)
        keyboard.row(key_3)
        keyboard.row(key_4)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –ö —É—á–∞—Å—Ç–∫—É –µ—Å—Ç—å –ø—Ä–æ–µ–∑–¥?',
            reply_markup=keyboard
        )

    elif callback.data in [
        '–ê—Å—Ñ–∞–ª—å—Ç',
        '–ù–µ–ø–ª–æ—Ö–∞—è –Ω–∞—Å—ã–ø–Ω–∞—è –¥–æ—Ä–æ–≥–∞',
        '–ù–µ–ø–ª–æ—Ö–∞—è –≥—Ä—É–Ω—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞',
        '–ë–µ–∑–¥–æ—Ä–æ–∂—å–µ, –∑–∞—Ç—Ä—É–¥–Ω—è—é—â–µ–µ –ø—Ä–æ–µ–∑–¥'
    ]:
        global road
        road = callback.data

        if reality == '—É—á–∞—Å—Ç–æ–∫':
            bot.send_message(
                callback.from_user.id,
                'üîª –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã c –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã'
            )
            bot.register_next_step_handler(callback.message, get_land_street_name)
        else:
            bot.send_message(
                callback.from_user.id,
                'üîª –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã c –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã. –ò–Ω–∞—á–µ - –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É "0")'
            )
            bot.register_next_step_handler(callback.message, get_home_street_name)

    elif callback.data in [
        '1floor', '2floor', '3floor',
        '4floor', '5floor', '6floor',
        '7floor', '8floor', '9floor',
    ]:
        global floor
        floor = int(callback.data[0])

        keyboard = InlineKeyboardMarkup()
        buttons_text = [str(i) for i in range(1, 19)]
        _callback_data = [str(i) + 'floors' for i in range(1, 19)]

        for j in range(0, 3):
            _button = [InlineKeyboardButton(text=buttons_text[i], callback_data=_callback_data[i]) for i in range(j * 6, 6 + 6 * j)]
            keyboard.row(*_button)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –£–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞',
            reply_markup=keyboard
        )

    elif callback.data in [
        '10floor', '11floor', '12floor',
        '13floor', '14floor', '15floor',
        '16floor', '17floor', '18floor',
    ]:
        floor = int(callback.data[0] + callback.data[1])

        keyboard = InlineKeyboardMarkup()
        buttons_text = [str(i) for i in range(1, 19)]
        _callback_data = [str(i) + 'floors' for i in range(1, 19)]

        for j in range(0, 3):
            _button = [InlineKeyboardButton(text=buttons_text[i], callback_data=_callback_data[i]) for i in range(j * 6, 6 + 6 * j)]
            keyboard.row(*_button)

        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –£–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞',
            reply_markup=keyboard
        )

    elif callback.data in [
        '1floors', '2floors', '3floors',
        '4floors', '5floors', '6floors',
        '7floors', '8floors', '9floors',
    ]:
        global number_of_floors
        number_of_floors = int(callback.data[0])

        bot.send_message(
            callback.from_user.id,
            f'üîª –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å {reality}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." (—Ç–æ—á–∫—É) –¥–ª—è —Ü–µ–ª–æ–π –∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç–∏'
        )
        bot.register_next_step_handler(callback.message, get_area)

    elif callback.data in [
        '11floors', '12floors', '13floors',
        '14floors', '15floors', '16floors',
        '17floors', '18floors', '10floors',
    ]:
        number_of_floors = int(callback.data[0] + callback.data[1])

        bot.send_message(
            callback.from_user.id,
            f'üîª –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å {reality}—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." (—Ç–æ—á–∫—É) –¥–ª—è —Ü–µ–ª–æ–π –∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç–∏'
        )
        bot.register_next_step_handler(callback.message, get_area)

    elif callback.data == 'yes_encumbrance':
        global encumbrance
        encumbrance = True
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='yes_children')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_children')
        keyboard.add(key_1, key_2)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ?',
            reply_markup=keyboard
        )

    elif callback.data == 'no_encumbrance':
        encumbrance = False
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='yes_children')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_children')
        keyboard.add(key_1, key_2)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text='üîª –í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ?',
            reply_markup=keyboard
        )

    elif callback.data == 'yes_children':
        global children
        children = True
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='yes_mortage')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_mortage')
        keyboard.add(key_1, key_2)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text=f'üîª {reality}—É –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è?',
            reply_markup=keyboard
        )

    elif callback.data == 'no_children':
        children = False
        keyboard = InlineKeyboardMarkup()
        key_1 = InlineKeyboardButton(text='–î–∞', callback_data='yes_mortage')
        key_2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_mortage')
        keyboard.add(key_1, key_2)
        if reality == '–¥–æ–º' or reality == '—Ç–∞—É–Ω—Ö–∞—É—Å' or reality == '—É—á–∞—Å—Ç–æ–∫':
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=f'üîª {reality} –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è?',
                reply_markup=keyboard
            )
        else:
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=f'üîª {reality}—É –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è?',
                reply_markup=keyboard
            )

    elif callback.data == 'yes_mortage':
        global mortage
        mortage = True
        bot.send_message(
            callback.from_user.id,
            'üîª –í–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä '
            + '—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å'
            + '–≤–∞–º–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è'
        )
        bot.register_next_step_handler(callback.message, get_phone_number)

    elif callback.data == 'no_mortage':
        mortage = False
        bot.send_message(
            callback.from_user.id,
            'üîª –í–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä '
            + '—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å'
            + '–≤–∞–º–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è'
        )
        bot.register_next_step_handler(callback.message, get_phone_number)

    elif callback.data in [
        'edit_1–∫.–∫–≤.', 'edit_2–∫.–∫–≤.',
        'edit_3–∫.–∫–≤.', 'edit_4–∫.–∫–≤.',
        'edit_5–∫.–∫–≤.'
    ]:
        global objects_group
        objects_group = 'Apartment'
        bot.send_message(
            callback.from_user.id,
            '–ù–∞–ø–∏—à–∏—Ç–µ id –æ–±—ä–µ–∫—Ç–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–≥–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ /myobjects'
        )
        bot.register_next_step_handler(callback.message, get_pk_edit_price)

    elif callback.data == 'edit_–ö–æ–º–Ω–∞—Ç–∞':
        objects_group = 'Room'
        bot.send_message(
            callback.from_user.id,
            '–ù–∞–ø–∏—à–∏—Ç–µ id –æ–±—ä–µ–∫—Ç–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–≥–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ /myobjects'
        )
        bot.register_next_step_handler(callback.message, get_pk_edit_price)

    elif callback.data == 'edit_–î–æ–º':
        objects_group = 'House'
        bot.send_message(
            callback.from_user.id,
            '–ù–∞–ø–∏—à–∏—Ç–µ id –æ–±—ä–µ–∫—Ç–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–≥–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ /myobjects'
        )
        bot.register_next_step_handler(callback.message, get_pk_edit_price)

    elif callback.data == 'edit_–¢–∞—É–Ω—Ö–∞—É—Å':
        objects_group = 'TownHouse'
        bot.send_message(
            callback.from_user.id,
            '–ù–∞–ø–∏—à–∏—Ç–µ id –æ–±—ä–µ–∫—Ç–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–≥–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ /myobjects'
        )
        bot.register_next_step_handler(callback.message, get_pk_edit_price)

    elif callback.data == 'edit_–£—á–∞—Å—Ç–æ–∫':
        objects_group = 'Land'
        bot.send_message(
            callback.from_user.id,
            '–ù–∞–ø–∏—à–∏—Ç–µ id –æ–±—ä–µ–∫—Ç–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–≥–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å /myobjects'
        )
        bot.register_next_step_handler(callback.message, get_pk_edit_price)

# bot.polling(none_stop=True, interval=0)
bot.infinity_polling()
